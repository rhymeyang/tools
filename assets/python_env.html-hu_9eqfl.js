import{_ as s,c as a,b as e,o as t}from"./app-I4zo0YX7.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h2 id="python-env" tabindex="-1"><a class="header-anchor" href="#python-env"><span>Python env</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3 python3-pip <span class="token parameter variable">-y</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Install web3.py:</span></span>
<span class="line">pip3 <span class="token function">install</span> web3</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="connect-to-your-sepolia-node" tabindex="-1"><a class="header-anchor" href="#connect-to-your-sepolia-node"><span>Connect to Your Sepolia Node</span></a></h2><p>Create a Python script (e.g., deploy_contract.py) and set up the connection to your Sepolia node.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Connect to your local Sepolia node</span></span>
<span class="line">rpc_url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8545&quot;</span>  <span class="token comment"># Update if necessary</span></span>
<span class="line">web3 <span class="token operator">=</span> Web3<span class="token punctuation">(</span>Web3<span class="token punctuation">.</span>HTTPProvider<span class="token punctuation">(</span>rpc_url<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Check connection</span></span>
<span class="line"><span class="token keyword">if</span> web3<span class="token punctuation">.</span>isConnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Connected to Sepolia node&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compile-your-smart-contract" tabindex="-1"><a class="header-anchor" href="#compile-your-smart-contract"><span>Compile Your Smart Contract</span></a></h2><div class="language-Solidy line-numbers-mode" data-highlighter="prismjs" data-ext="Solidy" data-title="Solidy"><pre><code><span class="line">// SPDX-License-Identifier: MIT</span>
<span class="line">pragma solidity ^0.8.0;</span>
<span class="line"></span>
<span class="line">contract MyContract {</span>
<span class="line">    string public message;</span>
<span class="line"></span>
<span class="line">    constructor(string memory _message) {</span>
<span class="line">        message = _message;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    function setMessage(string memory _newMessage) public {</span>
<span class="line">        message = _newMessage;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compile-with-solc" tabindex="-1"><a class="header-anchor" href="#compile-with-solc"><span>Compile with solc</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> solc <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Compile the contract:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">solc <span class="token parameter variable">--abi</span> <span class="token parameter variable">--bin</span> MyContract.sol <span class="token parameter variable">-o</span> build/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>This will generate:</p><ul><li>ABI: MyContract.abi</li><li>Bytecode: MyContract.bin</li></ul></blockquote><h3 id="deploy-the-contract" tabindex="-1"><a class="header-anchor" href="#deploy-the-contract"><span>Deploy the Contract</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">from web3 <span class="token function">import</span> Web3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Connect to the local Sepolia node</span></span>
<span class="line">rpc_url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8545&quot;</span></span>
<span class="line">web3 <span class="token operator">=</span> Web3<span class="token punctuation">(</span>Web3.HTTPProvider<span class="token punctuation">(</span>rpc_url<span class="token punctuation">))</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Ensure connection is successful</span></span>
<span class="line"><span class="token keyword">if</span> web3.isConnected<span class="token punctuation">(</span><span class="token punctuation">)</span>:</span>
<span class="line">    print<span class="token punctuation">(</span><span class="token string">&quot;Connected to Sepolia node&quot;</span><span class="token punctuation">)</span></span>
<span class="line">else:</span>
<span class="line">    raise Exception<span class="token punctuation">(</span><span class="token string">&quot;Failed to connect to Sepolia&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Specify the deployer&#39;s account and private key</span></span>
<span class="line">deployer_address <span class="token operator">=</span> <span class="token string">&quot;0 xYourAddress&quot;</span>  <span class="token comment"># Replace with your Ethereum address</span></span>
<span class="line">private_key <span class="token operator">=</span> <span class="token string">&quot;0 xYourPrivateKey&quot;</span>  <span class="token comment"># Replace with your private key</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Read the ABI and bytecode</span></span>
<span class="line">with open<span class="token punctuation">(</span><span class="token string">&quot;build/MyContract.abi&quot;</span>, <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> as abi_file:</span>
<span class="line">    contract_abi <span class="token operator">=</span> abi_file.read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">with open<span class="token punctuation">(</span><span class="token string">&quot;build/MyContract.bin&quot;</span>, <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> as bin_file:</span>
<span class="line">    contract_bytecode <span class="token operator">=</span> bin_file.read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a contract instance</span></span>
<span class="line">contract <span class="token operator">=</span> web3.eth.contract<span class="token punctuation">(</span>abi<span class="token operator">=</span>contract_abi, <span class="token assign-left variable">bytecode</span><span class="token operator">=</span>contract_bytecode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Build the transaction</span></span>
<span class="line">transaction <span class="token operator">=</span> contract.constructor<span class="token punctuation">(</span><span class="token string">&quot;Hello, Sepolia!&quot;</span><span class="token punctuation">)</span>.buildTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;from&quot;</span><span class="token builtin class-name">:</span> deployer_address,</span>
<span class="line">    <span class="token string">&quot;nonce&quot;</span><span class="token builtin class-name">:</span> web3.eth.getTransactionCount<span class="token punctuation">(</span>deployer_address<span class="token punctuation">)</span>,</span>
<span class="line">    <span class="token string">&quot;gas&quot;</span><span class="token builtin class-name">:</span> <span class="token number">3000000</span>,</span>
<span class="line">    <span class="token string">&quot;gasPrice&quot;</span><span class="token builtin class-name">:</span> web3.toWei<span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span>, <span class="token string">&quot;gwei&quot;</span><span class="token punctuation">)</span>,</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Sign the transaction</span></span>
<span class="line">signed_txn <span class="token operator">=</span> web3.eth.account.sign_transaction<span class="token punctuation">(</span>transaction, <span class="token assign-left variable">private_key</span><span class="token operator">=</span>private_key<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Send the transaction</span></span>
<span class="line">txn_hash <span class="token operator">=</span> web3.eth.send_raw_transaction<span class="token punctuation">(</span>signed_txn.rawTransaction<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Wait for confirmation</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;Deploying contract... (txn hash: {txn_hash.hex()})&quot;</span><span class="token punctuation">)</span></span>
<span class="line">receipt <span class="token operator">=</span> web3.eth.wait_for_transaction_receipt<span class="token punctuation">(</span>txn_hash<span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;Contract deployed at address: {receipt.contractAddress}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interact-with-the-deployed-contract" tabindex="-1"><a class="header-anchor" href="#interact-with-the-deployed-contract"><span>Interact with the Deployed Contract</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># Interact with the deployed contract</span></span>
<span class="line">contract_address <span class="token operator">=</span> receipt<span class="token punctuation">.</span>contractAddress</span>
<span class="line">contract_instance <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>address<span class="token operator">=</span>contract_address<span class="token punctuation">,</span> abi<span class="token operator">=</span>contract_abi<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Call a function (read-only)</span></span>
<span class="line">message <span class="token operator">=</span> contract_instance<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>message<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Contract message: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Send a transaction (write)</span></span>
<span class="line">txn <span class="token operator">=</span> contract_instance<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>setMessage<span class="token punctuation">(</span><span class="token string">&quot;Updated Message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>buildTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;from&quot;</span><span class="token punctuation">:</span> deployer_address<span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;nonce&quot;</span><span class="token punctuation">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>getTransactionCount<span class="token punctuation">(</span>deployer_address<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;gas&quot;</span><span class="token punctuation">:</span> <span class="token number">200000</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;gasPrice&quot;</span><span class="token punctuation">:</span> web3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gwei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Sign and send the transaction</span></span>
<span class="line">signed_txn <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>account<span class="token punctuation">.</span>sign_transaction<span class="token punctuation">(</span>txn<span class="token punctuation">,</span> private_key<span class="token operator">=</span>private_key<span class="token punctuation">)</span></span>
<span class="line">txn_hash <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>signed_txn<span class="token punctuation">.</span>rawTransaction<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Transaction sent (txn hash: </span><span class="token interpolation"><span class="token punctuation">{</span>txn_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run-the-script" tabindex="-1"><a class="header-anchor" href="#run-the-script"><span>Run the Script</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">python3 deploy_contract<span class="token punctuation">.</span>py</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,19)]))}const o=s(p,[["render",i],["__file","python_env.html.vue"]]),r=JSON.parse('{"path":"/BlockChain/python_env.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python env","slug":"python-env","link":"#python-env","children":[]},{"level":2,"title":"Connect to Your Sepolia Node","slug":"connect-to-your-sepolia-node","link":"#connect-to-your-sepolia-node","children":[]},{"level":2,"title":"Compile Your Smart Contract","slug":"compile-your-smart-contract","link":"#compile-your-smart-contract","children":[{"level":3,"title":"Compile with solc","slug":"compile-with-solc","link":"#compile-with-solc","children":[]},{"level":3,"title":"Deploy the Contract","slug":"deploy-the-contract","link":"#deploy-the-contract","children":[]},{"level":3,"title":"Interact with the Deployed Contract","slug":"interact-with-the-deployed-contract","link":"#interact-with-the-deployed-contract","children":[]},{"level":3,"title":"Run the Script","slug":"run-the-script","link":"#run-the-script","children":[]}]}],"git":{"updatedTime":1732662321000},"filePathRelative":"BlockChain/python_env.md"}');export{o as comp,r as data};
