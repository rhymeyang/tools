import{_ as l,c as s,b as a,o as n}from"./app-NfUG-4si.js";const i={};function o(d,e){return n(),s("div",null,e[0]||(e[0]=[a(`<ul><li><a href="https://go.dev/dl/" target="_blank" rel="noopener noreferrer">source</a><ul><li>https://go.dev/dl/</li><li>https://golang.google.cn/dl/</li></ul></li><li><a href="https://go.dev/" target="_blank" rel="noopener noreferrer">dev </a></li><li><a href="https://www.liwenzhou.com/" target="_blank" rel="noopener noreferrer">李文周的博客</a><ul><li>https://github.com/Q1mi/go_tutorial</li></ul></li></ul><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>WINDOWS</span></a></h3><ul><li>GOPATH</li><li>GOPATH/bin</li></ul><h3 id="go-modules" tabindex="-1"><a class="header-anchor" href="#go-modules"><span>go modules</span></a></h3><h4 id="什么是-go-modules" tabindex="-1"><a class="header-anchor" href="#什么是-go-modules"><span>什么是 Go Modules？</span></a></h4><p>Go Modules 是 Go 语言的一种依赖管理工具，用于解决 Go 项目的包依赖问题。它从 Go 1.11 开始引入，并在 Go 1.13 之后成为官方推荐的依赖管理方式。</p><p>核心功能：</p><ul><li>依赖管理：管理项目依赖的版本，并确保一致性。</li><li>版本控制：支持语义化版本号（Semantic Versioning），可以指定依赖的版本。</li><li>工作环境隔离：无需使用 $GOPATH，可以在任何目录下创建和管理 Go 项目。</li><li>模块化支持：支持多模块开发，一个项目可以包含多个模块。</li></ul><p>主要文件：</p><ul><li>go.mod： <ul><li>定义模块名称、Go 版本、依赖列表等信息。</li><li>通过 <code>go mod init &lt;module-name&gt;</code> 生成。</li></ul></li><li>go.sum： <ul><li>记录所有依赖的具体版本和校验和，用于验证依赖的一致性。</li></ul></li></ul><p>必须开启 Go Modules 吗？</p><p>推荐开启：</p><p>自 Go 1.16 起，Go Modules 默认开启并且是标准的依赖管理方式。 即使不开启，其他非模块化方式（如 $GOPATH）可能会遇到许多限制，尤其是在处理复杂依赖时。</p><p>不开启的影响：</p><ul><li>需要依赖 $GOPATH，开发路径受到限制。</li><li>难以管理版本，可能导致依赖冲突或不一致。</li><li>一些新的工具或库可能只支持 Go Modules。</li></ul><p>如何确认 Go Modules 是否开启？ 查看环境变量 GO111MODULE：</p><ul><li><code>on</code> ：始终开启。</li><li><code>off</code>：始终关闭。</li><li><code>auto</code>（默认值）：如果项目在 $GOPATH 之外并且有 go.mod 文件，则自动启用。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go <span class="token function">env</span> GO111MODULE</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手动设置" tabindex="-1"><a class="header-anchor" href="#手动设置"><span>手动设置：</span></a></h3><ul><li>开启：<code>export GO111MODULE=on</code></li><li>关闭：export GO111MODULE=off</li></ul><h3 id="修改项目" tabindex="-1"><a class="header-anchor" href="#修改项目"><span>修改项目：</span></a></h3><p>初始化 Go Modules：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go mod init <span class="token operator">&lt;</span>module-name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>添加依赖：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go get <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="永久设置-go-modules-模式为开启状态" tabindex="-1"><a class="header-anchor" href="#永久设置-go-modules-模式为开启状态"><span>永久设置 Go Modules 模式为开启状态</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 设置开启</span></span>
<span class="line">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 取消开启</span></span>
<span class="line">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>auto</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="go-env" tabindex="-1"><a class="header-anchor" href="#go-env"><span><code>go env</code>：</span></a></h4><ol><li>go env 是用于查看和设置 Go 环境变量的命令。</li></ol><ul><li>使用 <code>-w</code> 参数可以永久写入配置，使设置在所有终端会话中生效（存储在 Go 的环境配置文件中）。</li></ul><ol start="2"><li><code>GO111MODULE=on</code>： <ul><li>是 Go Modules 的模式控制变量，支持以下三种值： <ul><li><code>on</code>：强制开启 Go Modules，忽略项目是否位于 $GOPATH 内外。</li><li><code>off</code>：强制关闭 Go Modules，使用传统的 $GOPATH 模式。</li><li><code>auto</code>（默认值）：根据项目上下文自动决定是否启用 Go Modules。 <ul><li>如果项目根目录有 go.mod 文件，或者项目在 $GOPATH 外，则启用 Go Modules。</li><li>否则使用 $GOPATH 模式。</li></ul></li></ul></li></ul></li><li><code>-w</code> 参数： <ul><li>通过 <code>go env -w</code> 修改的值会写入全局配置文件（通常是用户目录下的配置文件），使该设置持久化，而不仅仅是当前会话有效。</li><li>例如，运行 <code>go env -w GO111MODULE=on</code> 后，Go 在任何环境下都会默认使用 Go Modules。</li></ul></li></ol><h2 id="_1-goroot" tabindex="-1"><a class="header-anchor" href="#_1-goroot"><span>1. GOROOT：</span></a></h2><p>作用：指向 Go 的安装目录，包含标准库和工具链。</p><p>是否需要设置：</p><ul><li>通常不需要手动设置，因为 Go 的安装程序会自动配置 GOROOT。</li><li>默认情况下，GOROOT 是 Go 安装路径，例如： <ul><li>使用 brew 安装时：<code>/usr/local/opt/go/libexec（Intel）</code>或 <code>/opt/homebrew/opt/go/libexec（Apple Silicon）</code>。</li></ul></li><li>使用官方安装包时：<code>/usr/local/go</code>。</li><li>如果确实需要自定义路径（例如手动安装 Go），可以在 <code>~/.zshrc</code> 或 <code>~/.bash_profile</code> 中添加：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/usr/local/go</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$GOROOT</span>/bin:<span class="token environment constant">$PATH</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>验证 GOROOT： 运行以下命令确认当前的 GOROOT：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go <span class="token function">env</span> GOROOT</span>
<span class="line"></span>
<span class="line">go <span class="token function">env</span> GOPATH</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39)]))}const r=l(i,[["render",o],["__file","01_env.html.vue"]]),p=JSON.parse('{"path":"/Go/01_env.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[{"level":3,"title":"WINDOWS","slug":"windows","link":"#windows","children":[]},{"level":3,"title":"go modules","slug":"go-modules","link":"#go-modules","children":[]},{"level":3,"title":"手动设置：","slug":"手动设置","link":"#手动设置","children":[]},{"level":3,"title":"修改项目：","slug":"修改项目","link":"#修改项目","children":[]},{"level":3,"title":"永久设置 Go Modules 模式为开启状态","slug":"永久设置-go-modules-模式为开启状态","link":"#永久设置-go-modules-模式为开启状态","children":[]}]},{"level":2,"title":"1. GOROOT：","slug":"_1-goroot","link":"#_1-goroot","children":[]}],"git":{"updatedTime":1737754202000},"filePathRelative":"Go/01_env.md"}');export{r as comp,p as data};
